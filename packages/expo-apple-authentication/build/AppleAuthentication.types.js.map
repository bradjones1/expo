{"version":3,"file":"AppleAuthentication.types.js","sourceRoot":"","sources":["../src/AppleAuthentication.types.ts"],"names":[],"mappings":"AAAA,OAAO,uBAAuB,MAAM,2BAA2B,CAAC;AAGhE,MAAM,EACJ,KAAK,EACL,SAAS,EACT,eAAe,EACf,mBAAmB,EACnB,UAAU,EACV,WAAW,GACZ,GAAG,uBAAuB,CAAC;AAoI5B;;;;;;;GAOG;AACH,MAAM,CAAN,IAAY,oBAUX;AAVD,WAAY,oBAAoB;IAC9B;;OAEG;IACH,wDAAW,KAAK,IAAI,KAAK,CAAC,QAAQ,cAAA,CAAA;IAElC;;OAEG;IACH,qDAAQ,KAAK,IAAI,KAAK,CAAC,KAAK,WAAA,CAAA;AAC9B,CAAC,EAVW,oBAAoB,KAApB,oBAAoB,QAU/B;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,wBAoBX;AApBD,WAAY,wBAAwB;IAClC;;OAEG;IACH,6DAAQ,SAAS,IAAI,SAAS,CAAC,KAAK,WAAA,CAAA;IAEpC;;OAEG;IACH,8DAAS,SAAS,IAAI,SAAS,CAAC,MAAM,YAAA,CAAA;IAEtC;;OAEG;IACH,+DAAU,SAAS,IAAI,SAAS,CAAC,OAAO,aAAA,CAAA;IAExC;;OAEG;IACH,gEAAW,SAAS,IAAI,SAAS,CAAC,QAAQ,cAAA,CAAA;AAC5C,CAAC,EApBW,wBAAwB,KAAxB,wBAAwB,QAoBnC;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,8BAeX;AAfD,WAAY,8BAA8B;IACxC;;OAEG;IACH,8EAAa,eAAe,IAAI,eAAe,CAAC,UAAU,gBAAA,CAAA;IAE1D;;OAEG;IACH,2EAAU,eAAe,IAAI,eAAe,CAAC,OAAO,aAAA,CAAA;IAEpD;;OAEG;IACH,4EAAW,eAAe,IAAI,eAAe,CAAC,QAAQ,cAAA,CAAA;AACxD,CAAC,EAfW,8BAA8B,KAA9B,8BAA8B,QAezC;AAED;;;;;;GAMG;AACH,MAAM,CAAN,IAAY,kCAeX;AAfD,WAAY,kCAAkC;IAC5C;;OAEG;IACH,sFAAa,mBAAmB,IAAI,mBAAmB,CAAC,UAAU,gBAAA,CAAA;IAElE;;OAEG;IACH,mFAAU,mBAAmB,IAAI,mBAAmB,CAAC,OAAO,aAAA,CAAA;IAE5D;;OAEG;IACH,uFAAc,mBAAmB,IAAI,mBAAmB,CAAC,WAAW,iBAAA,CAAA;AACtE,CAAC,EAfW,kCAAkC,KAAlC,kCAAkC,QAe7C;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,yBAIX;AAJD,WAAY,yBAAyB;IACnC,iEAAU,UAAU,IAAI,UAAU,CAAC,OAAO,aAAA,CAAA;IAC1C,gEAAS,UAAU,IAAI,UAAU,CAAC,MAAM,YAAA,CAAA;IACxC,kEAAW,UAAU,IAAI,UAAU,CAAC,QAAQ,cAAA,CAAA;AAC9C,CAAC,EAJW,yBAAyB,KAAzB,yBAAyB,QAIpC;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,0BAIX;AAJD,WAAY,0BAA0B;IACpC,iEAAQ,WAAW,IAAI,WAAW,CAAC,KAAK,WAAA,CAAA;IACxC,iEAAQ,WAAW,IAAI,WAAW,CAAC,KAAK,WAAA,CAAA;IACxC,wEAAe,WAAW,IAAI,WAAW,CAAC,YAAY,kBAAA,CAAA;AACxD,CAAC,EAJW,0BAA0B,KAA1B,0BAA0B,QAIrC;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,qBAIX;AAJD,WAAY,qBAAqB;IAC/B,4CAAmB,CAAA;IACnB,0CAAiB,CAAA;IACjB,0CAAiB,CAAA;AACnB,CAAC,EAJW,qBAAqB,KAArB,qBAAqB,QAIhC","sourcesContent":["import ExpoAppleAuthentication from './ExpoAppleAuthentication';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nconst {\n  Scope,\n  Operation,\n  CredentialState,\n  UserDetectionStatus,\n  ButtonType,\n  ButtonStyle,\n} = ExpoAppleAuthentication;\n\nexport interface SignInWithAppleButtonProps {\n  /**\n   * The callback which is called when the user pressed the button.\n   */\n  onPress: () => void;\n\n  /**\n   * Controls the text that is shown on the button.\n   */\n  buttonType: SignInWithAppleButtonType;\n\n  /**\n   * Controls the style of the button.\n   */\n  buttonStyle: SignInWithAppleButtonStyle;\n\n  /**\n   * The radius of the corners of the button.\n   */\n  cornerRadius?: number;\n\n  style?: StyleProp<ViewStyle>;\n}\n\n/**\n* The options you can supply when making a call to `SignInWithApple.requestAsync()`.\n*\n* @see [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest) for more details.\n*/\nexport interface SignInWithAppleOptions {\n  /**\n    * The scopes that you are requesting.\n    * @defaults `[]` (no scopes).\n    */\n  requestedScopes?: SignInWithAppleScope[];\n\n  /**\n    * The operation that you would like to perform.\n    * @defaults `SignInWithApple.Operation.Login`\n    */\n  requestedOperation?: SignInWithAppleOperation;\n\n  /**\n    * Must be set for `Refresh` and `Logout` operations\n    *\n    * Typically you leave this property set to nil the first time you authenticate a user.\n    * Otherwise, if you previously received an `SignInWithAppleCredential` set this property to the value from the user property.\n    * Must be set for Refresh and Logout operations.\n  */\n  user?: string;\n\n  /**\n    * Data that’s returned to you unmodified in the corresponding credential after a successful authentication.\n    * Used to verify that the response was from the request you made.\n    * Can be used to avoid replay attacks.\n    */\n  state?: string;\n}\n\n/**\n* The user credentials returned to a successful call to `SignInWithApple.requestAsync()`.\n*\n* @see [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidcredential) for more details.\n*/\nexport interface SignInWithAppleCredential {\n  /**\n   * A value indicating the status type of the requested credential.\n   * Success if the credential was retrieved successfully,\n   * Revoke if the credential was revoked,\n   * or Cancel if the user canceled the Sign In operation.\n   */\n  type: SignInWithAppleStatus;\n\n  /**\n    * A JSON Web Token (JWT) that securely communicates information about the user to your app.\n    */\n  identityToken?: string;\n\n  /**\n    * \tA short-lived token used by your app for proof of authorization when interacting with the app’s server counterpart.\n    */\n  authorizationCode?: string;\n\n  /**\n    * An arbitrary string that your app provided to the request that generated the credential.\n    * You can set this in `SignInWithAppleOptions`.\n    */\n  user?: string;\n\n  /**\n    * An identifier associated with the authenticated user.\n    * You can use this to check if the user is still authenticated later.\n    * This is stable and can be shared across apps released under the same development team.\n    * The same user will have a different identifier for apps released by other developers.\n    */\n  state?: string;\n\n  /**\n    * The contact information the user authorized your app to access.\n    */\n  authorizedScopes?: SignInWithAppleScope[];\n\n  /**\n    * The user’s name. Might not present if you didn't request access or if the user denied access.\n    */\n  fullName?: string;\n\n  /**\n    * The user’s email address. Might not present if you didn't request access or if the user denied access.\n    */\n  email?: string;\n\n  /**\n    * A value that indicates whether the user appears to be a real person.\n    */\n  realUserStatus?: SignInWithAppleUserDetectionStatus;\n}\n\n/**\n * Tokenized object representing the different portions of the user's full name.\n */\nexport interface SignInWithAppleFullName {\n  namePrefix?: string;\n  givenName?: string;\n  middleName?: string;\n  familyName?: string;\n  nameSuffix?: string;\n  nickname?: string;\n}\n\n/**\n * Controls which scopes you are requesting when the call `SignInWithApple.requestAsync()`.\n *\n * @note Note that it is possible that you will not be granted all of the scopes which you request.\n * You need to check which ones you are granted in the `SignInWithAppleCredential` you get back.\n *\n * @see [Apple documention](https://developer.apple.com/documentation/authenticationservices/asauthorizationscope) for more details.\n */\nexport enum SignInWithAppleScope {\n  /**\n   * A scope that includes the user’s full name.\n   */\n  FullName = Scope && Scope.FullName,\n\n  /**\n   * A scope that includes the user’s email address.\n   */\n  Email = Scope && Scope.Email,\n}\n\n/**\n * Controls what operation you are requesting when the call `SignInWithApple.requestAsync()`.\n *\n * @see [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidoperation) for more details.\n */\nexport enum SignInWithAppleOperation {\n  /**\n   * An operation used to authenticate a user.\n   */\n  Login = Operation && Operation.Login,\n\n  /**\n   * An operation that ends an authenticated session.\n   */\n  Logout = Operation && Operation.Logout,\n\n  /**\n   * An operation that refreshes the logged-in user’s credentials.\n   */\n  Refresh = Operation && Operation.Refresh,\n\n  /**\n   * An operation that depends on the particular kind of credential provider.\n   */\n  Implicit = Operation && Operation.Implicit,\n}\n\n/**\n * Defines the state that the credential is in when responding to your call to `SignInWithApple.getCredentialStateAsync()`.\n *\n * @see [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidprovidercredentialstate) for more details.\n */\nexport enum SignInWithAppleCredentialState {\n  /**\n   * The user is authorized.\n   */\n  Authorized = CredentialState && CredentialState.Authorized,\n\n  /**\n   * Authorization for the given user has been revoked.\n   */\n  Revoked = CredentialState && CredentialState.Revoked,\n\n  /**\n   * The user can’t be found.\n   */\n  NotFound = CredentialState && CredentialState.NotFound,\n}\n\n/**\n * A value that indicates whether the user appears to be a real person.\n * You get this in the realUserStatus property of a SignInWithAppleCredential object.\n * It can be used as one metric to help prevent fraud.\n *\n * @see [Apple documentation](https://developer.apple.com/documentation/authenticationservices/asuserdetectionstatus) for more details.\n */\nexport enum SignInWithAppleUserDetectionStatus {\n  /**\n   * The user appears to be a real person.\n   */\n  LikelyReal = UserDetectionStatus && UserDetectionStatus.LikelyReal,\n\n  /**\n   * The system hasn’t determined whether the user might be a real person.\n   */\n  Unknown = UserDetectionStatus && UserDetectionStatus.Unknown,\n\n  /**\n   * The system can’t determine this user’s status as a real person.\n   */\n  Unsupported = UserDetectionStatus && UserDetectionStatus.Unsupported,\n}\n\n/**\n * Controls the text that is shown of the `SignInWithAppleButton`.\n */\nexport enum SignInWithAppleButtonType {\n  Default = ButtonType && ButtonType.Default,\n  SignIn = ButtonType && ButtonType.SignIn,\n  Continue = ButtonType && ButtonType.Continue,\n}\n\n/**\n * Controls the style of the `SignInWithAppleButton`.\n */\nexport enum SignInWithAppleButtonStyle {\n  Black = ButtonStyle && ButtonStyle.Black,\n  White = ButtonStyle && ButtonStyle.White,\n  WhiteOutline = ButtonStyle && ButtonStyle.WhiteOutline,\n}\n\n/**\n * Indicates the status of the attempt to retrieve the requested credential.\n */\nexport enum SignInWithAppleStatus {\n  Success = 'success',\n  Revoke = 'revoke',\n  Cancel = 'cancel',\n}\n\n/**\n * Event sent to the listener when the user's credentials have been revoked.\n */\nexport type RevokeEvent = {\n  type: SignInWithAppleStatus;\n}\n\n/**\n * Listener that is called when the user's credentials have been revoked.\n */\nexport type RevokeListener = (event: RevokeEvent) => void;\n"]}