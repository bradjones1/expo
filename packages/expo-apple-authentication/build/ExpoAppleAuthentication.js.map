{"version":3,"file":"ExpoAppleAuthentication.js","sourceRoot":"","sources":["../src/ExpoAppleAuthentication.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,6BAA6B,MAAM,iCAAiC,CAAC;AAQ5E;;;GAGG;AACH,MAAM,UAAU,gBAAgB;IAC9B,IAAI,CAAC,6BAA6B,CAAC,gBAAgB,EAAE;QACnD,MAAM,IAAI,KAAK,CAAC,6EAA6E,QAAQ,CAAC,EAAE,kHAAkH,CAAC,CAAC;KAC7N;IACD,OAAO,6BAA6B,CAAC,gBAAgB,EAAE,CAAC;AAC1D,CAAC;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,UAAU,YAAY,CAAC,OAA+B;IAC1D,IAAI,CAAC,6BAA6B,CAAC,YAAY,EAAE;QAC/C,MAAM,IAAI,KAAK,CAAC,yEAAyE,QAAQ,CAAC,EAAE,kHAAkH,CAAC,CAAC;KACzN;IACD,OAAO,6BAA6B,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AAC7D,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,UAAU,uBAAuB,CAAC,MAAc;IACpD,IAAI,CAAC,6BAA6B,CAAC,YAAY,EAAE;QAC/C,MAAM,IAAI,KAAK,CAAC,oFAAoF,QAAQ,CAAC,EAAE,kHAAkH,CAAC,CAAC;KACpO;IACD,OAAO,6BAA6B,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;AACvE,CAAC;AAED,EAAE;AACF,yDAAyD;AACzD,EAAE;AACF,MAAM;AACN,wDAAwD;AACxD,2FAA2F;AAC3F,KAAK;AACL,cAAc;AACd,WAAW;AACX,mEAAmE;AACnE,KAAK;AACL,kBAAkB;AAClB,mEAAmE;AACnE,yCAAyC;AACzC,QAAQ;AACR,KAAK;AACL,oBAAoB;AACpB,oBAAoB;AACpB,SAAS;AACT,MAAM;AACN,sEAAsE","sourcesContent":["import { Platform } from 'react-native';\nimport ExpoAppleAuthenticationNative from './ExpoAppleAuthenticationNative';\n\nimport {\n  SignInWithAppleOptions,\n  SignInWithAppleCredential,\n  SignInWithAppleCredentialState,\n} from './ExpoAppleAuthentication.types';\n\n/**\n * A method which returns a Promise which resolves to a boolean if you are able to perform a Sign In with Apple.\n * Generally users need to be on iOS 13+.\n */\nexport function isAvailableAsync(): Promise<boolean> {\n  if (!ExpoAppleAuthenticationNative.isAvailableAsync) {\n    throw new Error(`The method 'ExpoAppleAuthentication.isAvailableAsync' is not available on ${Platform.OS}, are you sure you've linked all the native dependencies properly or are you sure it is availble on your device?`);\n  }\n  return ExpoAppleAuthenticationNative.isAvailableAsync();\n}\n\n/**\n * Perform a Sign In with Apple request with the given SignInWithAppleOptions.\n * The method will return a Promise which will resolve to a SignInWithAppleCredential on success.\n * You should make sure you include error handling.\n *\n * @example\n * ```ts\n * import * as SignInWithApple from \"expo-apple-authentication\";\n *\n * SignInWithApple.requestAsync({\n *   requestedScopes: [\n *     SignInWithApple.Scope.FullName,\n *     SignInWithApple.Scope.Email,\n *   ]\n * }).then(credentials => {\n *   // Handle successful authenticated\n * }).catch(error => {\n *   // Handle authentication errors\n * })\n * ```\n */\nexport function requestAsync(options: SignInWithAppleOptions): Promise<SignInWithAppleCredential> {\n  if (!ExpoAppleAuthenticationNative.requestAsync) {\n    throw new Error(`The method 'ExpoAppleAuthentication.requestAsync' is not available on ${Platform.OS}, are you sure you've linked all the native dependencies properly or are you sure it is availble on your device?`);\n  }\n  return ExpoAppleAuthenticationNative.requestAsync(options);\n}\n\n/**\n * You can query the current state of a user ID.\n * It will tell you if the token is still valid or if it has been revoked by the user.\n *\n * @see [Apple Documention](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidprovider/3175423-getcredentialstateforuserid) for more details.\n *\n * @example\n * ```ts\n * import * as SignInWithApple from \"expo-apple-authentication\";\n *\n * SignInWithApple.getCredentialStateAsync(userId).then(state => {\n *   switch (state) {\n *     case SignInWithAppleCredential.CredentialState.Authorized:\n *       // Handle the authorised state\n *       break;\n *     case SignInWithAppleCredential.CredentialState.Revoked:\n *       // The user has signed out\n *       break;\n *     case SignInWithAppleCredential.CredentialState.NotFound:\n *       // The user id was not found\n *       break;\n *   }\n * })\n * ```\n */\nexport function getCredentialStateAsync(userId: string): Promise<SignInWithAppleCredentialState> {\n  if (!ExpoAppleAuthenticationNative.requestAsync) {\n    throw new Error(`The method 'ExpoAppleAuthentication.getCredentialStateAsync' is not available on ${Platform.OS}, are you sure you've linked all the native dependencies properly or are you sure it is availble on your device?`);\n  }\n  return ExpoAppleAuthenticationNative.getCredentialStateAsync(userId);\n}\n\n//\n// TODO - came up with idea how to deliver this mechanism\n//\n// /**\n//  * Adds a listener for when a token has been revoked.\n//  * This means that the user has signed out and you should update your UI to reflect this\n//  *\n//  * @example\n//  * ```ts\n//  * import * as SignInWithApple from \"expo-apple-authentication\";\n//  *\n//  * // Subscribe\n//  * const unsubscribe = SignInWithApple.addRevokeListener(() => {\n//  *   // Handle the token being revoked\n//  * })\n//  *\n//  * // Unsubscribe\n//  * unsubscribe();\n//  * ```\n//  */\n// function addRevokeListener(revokeListener: () => void): () => void;\n"]}