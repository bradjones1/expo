{"version":3,"file":"ExpoAppleAuthentication.js","sourceRoot":"","sources":["../src/ExpoAppleAuthentication.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,6BAA6B,MAAM,iCAAiC,CAAC;AAE5E,OAAO,EAIL,wBAAwB,GACzB,MAAM,iCAAiC,CAAC;AAEzC;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,IAAI,CAAC,6BAA6B,CAAC,gBAAgB,EAAE;QACnD,OAAO,KAAK,CAAC;KACd;IACD,OAAO,6BAA6B,CAAC,gBAAgB,EAAE,CAAC;AAC1D,CAAC;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,OAA+B;IAChE,IAAI,CAAC,6BAA6B,CAAC,YAAY,EAAE;QAC/C,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,cAAc,CAAC,CAAC;KAC5E;IACD,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE;QAC/B,OAAO,CAAC,kBAAkB,GAAG,wBAAwB,CAAC,KAAK,CAAC;KAC7D;IACD,OAAO,6BAA6B,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AAC7D,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,MAAc;IAC1D,IAAI,CAAC,6BAA6B,CAAC,uBAAuB,EAAE;QAC1D,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,EAAE,yBAAyB,CAAC,CAAC;KACvF;IACD,OAAO,6BAA6B,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;AACvE,CAAC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport ExpoAppleAuthenticationNative from './ExpoAppleAuthenticationNative';\n\nimport {\n  SignInWithAppleOptions,\n  SignInWithAppleCredential,\n  SignInWithAppleCredentialState,\n  SignInWithAppleOperation,\n} from './ExpoAppleAuthentication.types';\n\n/**\n * A method which returns a Promise which resolves to a boolean if you are able to perform a Sign In with Apple.\n * Generally users need to be on iOS 13+.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (!ExpoAppleAuthenticationNative.isAvailableAsync) {\n    return false;\n  }\n  return ExpoAppleAuthenticationNative.isAvailableAsync();\n}\n\n/**\n * Perform a Sign In with Apple request with the given SignInWithAppleOptions.\n * The method will return a Promise which will resolve to a SignInWithAppleCredential on success.\n * You should make sure you include error handling.\n *\n * @example\n * ```ts\n * import * as SignInWithApple from \"expo-apple-authentication\";\n *\n * SignInWithApple.requestAsync({\n *   requestedScopes: [\n *     SignInWithApple.Scope.FullName,\n *     SignInWithApple.Scope.Email,\n *   ]\n * }).then(credentials => {\n *   // Handle successful authenticated\n * }).catch(error => {\n *   // Handle authentication errors\n * })\n * ```\n */\nexport async function requestAsync(options: SignInWithAppleOptions): Promise<SignInWithAppleCredential> {\n  if (!ExpoAppleAuthenticationNative.requestAsync) {\n    throw new UnavailabilityError('expo-apple-authentication', 'requestAsync');\n  }\n  if (!options.requestedOperation) {\n    options.requestedOperation = SignInWithAppleOperation.Login;\n  }\n  return ExpoAppleAuthenticationNative.requestAsync(options);\n}\n\n/**\n * You can query the current state of a user ID.\n * It will tell you if the token is still valid or if it has been revoked by the user.\n *\n * @see [Apple Documention](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidprovider/3175423-getcredentialstateforuserid) for more details.\n *\n * @example\n * ```ts\n * import * as SignInWithApple from \"expo-apple-authentication\";\n *\n * SignInWithApple.getCredentialStateAsync(userId).then(state => {\n *   switch (state) {\n *     case SignInWithAppleCredential.CredentialState.Authorized:\n *       // Handle the authorised state\n *       break;\n *     case SignInWithAppleCredential.CredentialState.Revoked:\n *       // The user has signed out\n *       break;\n *     case SignInWithAppleCredential.CredentialState.NotFound:\n *       // The user id was not found\n *       break;\n *   }\n * })\n * ```\n */\nexport async function getCredentialStateAsync(userId: string): Promise<SignInWithAppleCredentialState> {\n  if (!ExpoAppleAuthenticationNative.getCredentialStateAsync) {\n    throw new UnavailabilityError('expo-apple-authentication', 'getCredentialStateAsync');\n  }\n  return ExpoAppleAuthenticationNative.getCredentialStateAsync(userId);\n}\n"]}