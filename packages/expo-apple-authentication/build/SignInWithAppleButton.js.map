{"version":3,"file":"SignInWithAppleButton.js","sourceRoot":"","sources":["../src/SignInWithAppleButton.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EACL,oCAAoC,EACpC,2CAA2C,EAC3C,oCAAoC,EACpC,sCAAsC,EACtC,6CAA6C,EAC7C,sCAAsC,GACvC,MAAM,wCAAwC,CAAC;AAEhD,OAAO,EAEL,WAAW,EACX,UAAU,GACX,MAAM,6BAA6B,CAAC;AAErC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AACH,MAAM,yBAAyB,GAAyC,CAAC,KAAK,EAAE,EAAE;IAChF,IAAI,CAAC,oCAAoC,EAAE;QACzC,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAA;SAChE;QACD,OAAO,IAAI,CAAC;KACb;IAED,MAAM,EACJ,OAAO,EACP,WAAW,EACX,UAAU,EACV,GAAG,SAAS,EACb,GAAG,KAAK,CAAC;IAEV,MAAM,8BAA8B,GAAG,qBAAqB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAEtF,OAAO,CACL,CAAC,8BAA8B,CAC7B,aAAa,CAAC,CAAC,OAAO,CAAC,CACvB,IAAI,SAAS,CAAC,EACd,CACH,CAAC;AACJ,CAAC,CAAA;AAED,MAAM,gBAAgB,GAAgE;IACpF,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;QACnB,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,oCAAoC;QACzD,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,2CAA2C;QACvE,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,oCAAoC;KAC1D;IACD,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;QACrB,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,sCAAsC;QAC3D,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,6CAA6C;QACzE,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,sCAAsC;KAC5D;CACF,CAAC;AAEF,SAAS,qBAAqB,CAAC,IAAgB,EAAE,KAAkB;IACjE,OAAO,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AACvC,CAAC;AAED,eAAe,yBAAyB,CAAA","sourcesContent":["import React from 'react';\nimport {\n  ExpoSignInWithAppleButtonSignInWhite,\n  ExpoSignInWithAppleButtonSignInWhiteOutline,\n  ExpoSignInWithAppleButtonSignInBlack,\n  ExpoSignInWithAppleButtonContinueWhite,\n  ExpoSignInWithAppleButtonContinueWhiteOutline,\n  ExpoSignInWithAppleButtonContinueBlack,\n} from './ExpoSignInWithAppleButtonNativeViews';\n\nimport {\n  ButtonProps,\n  ButtonStyle,\n  ButtonType,\n} from './AppleAuthentication.types';\n\n/**\n * This component displays the \"Sign In with Apple\" button on your screen.\n * The App Store Guidelines require you to use this component to start the sign in process instead of a custom button.\n * You can customise the design of the button using the properties.\n * You should start the sign in process when the `onPress` property is called.\n *\n * You should only attempt to render this if `SignInWithApple.isAvailableAsync()` resolves to true.\n * This component will render nothing if it is not available and you will get a warning in `__DEV__ === true`.\n *\n * The properties of this component extends from `View`, however, you should not attempt to restyle the background color\n * or border radius with the style property.\n * This will not work and is against the App Store Guidelines.\n *\n * The additionally accepted properites are described in `SignInWithAppleButtonProps`.\n *\n * @see [Apple Documention](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidbutton) for more details.\n *\n * @example\n * ```ts\n * import { SignInWithAppleButton, SignInWithAppleButtonType, SignInWithAppleButtonStyle } from 'expo-apple-authentication';\n *\n * function YourComponent() {\n *   return (\n *     <SignInWithAppleButton\n *       buttonType={SignInWithAppleButtonType.Default}\n *       buttonStyle={SignInWithAppleButtonStyle.Black}\n *       cornerRadus={5}\n *       onPress={() => {\n *         // Start the sign in process\n *       }}\n *     />\n *   );\n * }\n * ```\n */\nconst ExpoSignInWithAppleButton: React.FunctionComponent<ButtonProps> = (props) => {\n  if (!ExpoSignInWithAppleButtonSignInWhite) {\n    if (__DEV__) {\n      console.warn('\\'ExpoSignInWithAppleButton\\' is not available.')\n    }\n    return null;\n  }\n\n  const {\n    onPress,\n    buttonStyle,\n    buttonType,\n    ...restProps\n  } = props;\n\n  const SignInWithAppleButtonComponent = selectButtonComponent(buttonType, buttonStyle);\n\n  return (\n    <SignInWithAppleButtonComponent\n      onButtonPress={onPress}\n      {...restProps}\n    />\n  );\n}\n\nconst ButtonComponents: { [type : number]: { [style: number]: React.ElementType } } = {\n  [ButtonType.SignIn]: {\n    [ButtonStyle.White]: ExpoSignInWithAppleButtonSignInWhite,\n    [ButtonStyle.WhiteOutline]: ExpoSignInWithAppleButtonSignInWhiteOutline,\n    [ButtonStyle.Black]: ExpoSignInWithAppleButtonSignInBlack,\n  },\n  [ButtonType.Continue]: {\n    [ButtonStyle.White]: ExpoSignInWithAppleButtonContinueWhite,\n    [ButtonStyle.WhiteOutline]: ExpoSignInWithAppleButtonContinueWhiteOutline,\n    [ButtonStyle.Black]: ExpoSignInWithAppleButtonContinueBlack,\n  },\n};\n\nfunction selectButtonComponent(type: ButtonType, style: ButtonStyle): React.ElementType {\n  return ButtonComponents[type][style];\n}\n\nexport default ExpoSignInWithAppleButton\n"]}